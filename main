#include "stmpu6050.h"
SMPU6050 mpu6050;



// defining
//                pins ARDUINO   sign                     PORT AVR
//                             board Arduino nano       Atmega 328P
# define Enable       8            //D8                 //PORTB 0                    
# define Step_3       7            //D7                 //PORTD 7                    
# define Step_2       6            //D6                 //PORTD 6                    
# define Step_1       5            //D5                 //PORTD 5                    
# define Dir_3        4            //D4                 //PORTD 4                    
# define Dir_2        3            //D3                 //PORTD 3                    
# define Dir_1        2            //D2                 //PORTD 2  
# define MS3          9            //D9                 //PORTB 1 
# define MS2          10           //D10                //PORTB 2 
# define MS1          11           //D11                //PORTB 3 





//     define arduino nano pins
//....................................
void  pin_INI() {
  pinMode(Enable, OUTPUT);
  pinMode(Step_1, OUTPUT);
  pinMode(Step_2, OUTPUT);
  pinMode(Step_3, OUTPUT);
  pinMode(Dir_1, OUTPUT);
  pinMode(Dir_2, OUTPUT);
  pinMode(Dir_3, OUTPUT);
  pinMode(MS1, OUTPUT);
  pinMode(MS2, OUTPUT);
  pinMode(MS3, OUTPUT);
  digitalWrite(Enable, LOW);
  digitalWrite(MS1, LOW);//this maynot nercessary when you welded these pins to logic high
  digitalWrite(MS2, HIGH);//this maynot nercessary when you welded these pins to logic high
  digitalWrite(MS3, LOW);//this maynot nercessary when you welded these pins to logic high
}



//     define timer2
//....................................
void timer_INI() {

  /*fo=16.000.000/8=2.000.000 Hz
    To=1/fo=1/2.000.000 s=0.5us
    timer=40*0.5=20us */

  TCCR2A = 0;                                                               //Make sure that the TCCR2A register is set to zero
  TCCR2B = 0;                                                               //Make sure that the TCCR2A register is set to zero
  TCCR2B |= (1 << CS21);                                                    //Set the CS21 bit in the TCCRB register to set the prescaler to 8
  OCR2A = 19;                                                               //The compare register is set to 39 => 20us / (1s / (16.000.000Hz / 8)) - 1
  TCCR2A |= (1 << WGM21);                                                   //Set counter 2 to CTC (clear timer on compare) mode Chế độ CTC bộ đếm được xóa về 0 khi giá trị bộ đếm (TCNT0) khớp với OCR0A
  TIMSK2 |= (1 << OCIE2A);                                                  //Set the interupt enable bit OCIE2A in the TIMSK2 register
}


int8_t Dir_M1, Dir_M2, Dir_M3;                                               // Dir_Mx >0 spin clockwise , Dir_Mx <0 anticlockwise Dir_Mx =0 stop
volatile int Count_timer1, Count_timer2, Count_timer3;                       //counting how many times timer appears in one STEP cycle
volatile int32_t Step1, Step2, Step3;
int16_t Count_TOP1, Count_BOT1, Count_TOP2, Count_BOT2, Count_TOP3, Count_BOT3;  //vị trí cuối của phần cao và cuối phần thấp trong 1 chu kỳ xung STEP
float Input, Output, I, Input_last, Output_L, Output_R, M_L, M_R, Motor_L, Motor_R, self_balance_Vgo;

float Kp = 18;
float Ki = 1.2;
float Kd = 3.2;

float  Offset = -0.5;
float    Vgo = 0;
float    Vgo_L = 0;
float    Vgo_R = 0;


char Bluetooth;
unsigned long loop_timer;


//     interrupt program of timer2
//....................................
ISR(TIMER2_COMPA_vect) {
  //creating STEP for MOTOR1
  if (Dir_M1 != 0) {                                                          //if motor allowed to spin
    Count_timer1++;
    if (Count_timer1 <= Count_TOP1)PORTD |= 0b00100000;                        //nếu là nhịp nằm trong phần cao trong xung STEP
    else PORTD &= 0b11011111;                                                 //nếu là nhịp nằm trong phần thấp của xung STEP
    if (Count_timer1 > Count_BOT1) {
      Count_timer1 = 0;                             
      if (Dir_M1 > 0)Step1++;
      else if (Dir_M1 < 0)Step1--;
    }
  }

  //creating STEP for MOTOR2
  if (Dir_M2 != 0) {
    Count_timer2++;
    if (Count_timer2 <= Count_TOP2)PORTD |= 0b01000000;
    else PORTD &= 0b10111111;
    if (Count_timer2 > Count_BOT2) {
      Count_timer2 = 0;
      if (Dir_M2 > 0)Step2++;
      else if (Dir_M2 < 0)Step2--;
    }
  }

  //creting STEP for MOTOR3
  if (Dir_M3 != 0) {
    Count_timer3++;
    if (Count_timer3 <= Count_TOP3)PORTD |= 0b10000000;
    else PORTD &= 0b01111111;
    if (Count_timer3 > Count_BOT3) {
      Count_timer3 = 0;
      if (Dir_M3 > 0)Step3++;
      else if (Dir_M3 < 0)Step3--;
    }
  }
}


//    velocity of motor 1
//....................................
void Speed_M1(int16_t x) {
  if (x < 0) {
    Dir_M1 = -1;
    PORTD &= 0b11111011;
  }
  else if (x > 0) {
    Dir_M1 = 1;
    PORTD |= 0b00000100;
  }
  else Dir_M1 = 0;

  Count_BOT1 = abs(x);
  Count_TOP1 = Count_BOT1 / 2;
}


//    velocity of motor 2
//....................................
void Speed_L(int16_t x) {
  if (x < 0) {
    Dir_M2 = -1;
    PORTD &= 0b11110111;
  }
  else if (x > 0) {
    Dir_M2 = 1;
    PORTD |= 0b00001000;
  }
  else Dir_M2 = 0;

  Count_BOT2 = abs(x);
  Count_TOP2 = Count_BOT2 / 2;
}


//     HÀM TỐC ĐỘ DI CHUYỂN MOTOR3
//....................................
void Speed_R(int16_t x) {
  if (x < 0) {
    Dir_M3 = -1;
    PORTD &= 0b11101111;
  }
  else if (x > 0) {
    Dir_M3 = 1;
    PORTD |= 0b00010000;
  }
  else Dir_M3 = 0;

  Count_BOT3 = abs(x);
  Count_TOP3 = Count_BOT3 / 2;
}



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setup() {
  mpu6050.init(0x68);
  Serial.begin(9600);               //Serial
  pin_INI();                        
  timer_INI();                      //define timer 2
  delay(500);                        //initializing
  loop_timer = micros() + 4000;
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void loop() {
  //
  float AngleY = mpu6050.getYAngle() ; // mpu6050.getAngleY()+7; //

  //Dùng PID cho MOTOR
  Input = AngleY + Offset - Vgo + self_balance_Vgo;                           //Vgo<0  fallback,Vgo >0 fallfront
  if (Output > 10 || Output < -10)Input += Output * 0.025 ;
  I += Input * Ki;
  I = constrain(I, -400, 400);

  Output = Kp * Input + I + Kd * (Input - Input_last);
  Input_last = Input;                                           //for the next loop

  //Control OUTPUT according to MOTOR_L nonlinearity
  if (Output > -5 && Output < 5)Output = 0;
  Output = constrain(Output, -400, 400);



  Output_L = Output;
  Output_R = Output;

  if (Serial.available() > 0) {

    Bluetooth = Serial.read();

  }
  if (Bluetooth == 'g') { //go
    if (Vgo < 7)Vgo += 3;//mỗi lần nhấn sẽ cộng thêm 2.5,đặt ra giới hạn 8 độ, 
    if (Output > 250)Vgo -= 0.005;

  }

  else if (Bluetooth == 'b') { //back
    if (Vgo > -7)Vgo -= 3;
    if (Output < - 250)Vgo += 0.005;

  }

  else if (Bluetooth == 'l') { //left
    Output_L -= 400;
    Output_R += 400;
    //if (Vgo_L > -3)Vgo_L -=1;
    //if (Vgo_R < 3)Vgo_R +=1;
    
  }

  else if (Bluetooth == 'r') { //right
    Output_L += 400;
    Output_R -= 400;
    //if (Vgo_L < 3)Vgo_L +=1;
    //if (Vgo_R > -3)Vgo_R -=1;
  }

  else if (Bluetooth == 's') { //stop
    Vgo = 0;
  }




  //Fix the nonlinearity of MOTOR_L
  if (Output_L > 0)Output_L = 405 - (1 / (Output_L + 9)) * 5500;
  else if (Output_L < 0)  Output_L = -405 - (1 / (Output_L - 9)) * 5500;


  //Fix the nonlinearity of MOTOR_R
  if (Output_R > 0)Output_R = 405 - (1 / (Output_R + 9)) * 5500; //  Output_R = 1    ----> M_R = -145
  //                                                            Output_R = 4.58 ----> M_R = 0
  //                                                            Output_R = 10   ----> M_R = 115.52
  //                                                            Output_R = 400  ----> M_R = 391.55
  else if (Output_R < 0)Output_R = -405 - (1 / (Output_R - 9)) * 5500;


  //Reverse the value passed to the Speed_L() function
  if (Output_L > 0)Motor_L = 400 - Output_L;
  else if (Output_L < 0)Motor_L = -400 - Output_L;
  else Motor_L = 0;

  //Reverse the value passed to the Speed_R() function
  if (Output_R > 0)Motor_R = 400 - Output_R;
  else if (Output_R < 0)Motor_R = -400 - Output_R;
  else Motor_R = 0;



  //run motors
  Speed_L(Motor_L);
  Speed_R(Motor_R);

  //Serial.println(AngleY);
  //  Serial.print("    ");
  //  Serial.println(Output);

  while (loop_timer > micros());
  loop_timer += 4000;
}
